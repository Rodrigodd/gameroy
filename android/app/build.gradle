import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'com.android.application'
    id 'org.mozilla.rust-android-gradle.rust-android'
}

def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))

android {
    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
	        keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    compileSdk 30

    ndkVersion "24.0.8215888"

    defaultConfig {
        applicationId "io.github.rodrigodd.gameroy"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        jniLibs.keepDebugSymbols += "**/libgameroy_android.so"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

cargo {
    module = ".."
    libname = "gameroy_android"
    targets = [
        'arm',
        'arm64',
        'x86',
        'x86_64'
    ]
    targetDirectory = "../../target"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders') {
        task.dependsOn 'cargoBuild'
    }
    if (task.name == 'generateDebugAssets' || task.name == 'generateReleaseAssets') {
        task.dependsOn 'generateLicenseAsset'
    }
    for (target in cargo.targets) {
        if (task.name == "cargoBuild${target.capitalize()}") {
            task.dependsOn "copy_libc++_shared${target.capitalize()}"
        }
    }
}

for (target in cargo.targets) {
    tasks.register("copy_libc++_shared${target.capitalize()}", Copy) {
        def ndkDir = android.ndkDirectory
        // hostTag, abi and archTriple from: https://developer.android.com/ndk/guides/other_build_systems

        def hostTag
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            if (Os.isArch("x86_64") || Os.isArch("amd64")) {
                hostTag = "windows-x86_64"
            } else {
                hostTag = "windows"
            }
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            hostTag = "darwin-x86_64"
        } else {
            hostTag = "linux-x86_64"
        }

        def archTriple = [
            arm: 'arm-linux-androideabi',
            arm64: 'aarch64-linux-android',
            x86: 'i686-linux-android',
            x86_64: 'x86_64-linux-android',
        ][target]
        def abi = [
            arm: 'armabi-v7a',
            arm64: 'arm64-v8a',
            x86: 'x86',
            x86_64: 'x86_64',
        ][target]

        def from_path = "$ndkDir/toolchains/llvm/prebuilt/$hostTag/sysroot/usr/lib/$archTriple/libc++_shared.so"
        def into_path = layout.buildDirectory.dir("rustJniLibs/android/$abi")

        assert file(from_path).exists()

        from from_path
        into into_path
    }
}

tasks.register('generateLicenseAsset', Exec) {
    inputs.file("$rootDir/../Cargo.lock")
        .withPropertyName('lockFile')
    standardOutput = new FileOutputStream("$rootDir/app/src/main/assets/license.html")
    commandLine 'cargo', 'about', 'generate',
        '-m', "$rootDir/Cargo.toml",
        '-c', "$rootDir/../license/about.toml",
        "$rootDir/../license/about.hbs"
}

task runDebug(type: Exec, dependsOn: ':app:installDebug') {
    commandLine 'adb', 'shell', 'am', 'start', '-n', 'io.github.rodrigodd.gameroy/io.github.rodrigodd.gameroy.MainActivity'
}

dependencies {

}
